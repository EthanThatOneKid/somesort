{"version":3,"sources":["components/Pipe.tsx","components/SortDisplay.tsx","SortList.ts","algorithms/quicksort.ts","algorithms/mergesort.ts","algorithms/index.ts","algorithms/selectionsort.ts","algorithms/bubblesort.ts","algorithms/combsort.ts","components/Dial.tsx","components/SortPanel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Pipe","state","index","props","value","reactEvent","event","nativeEvent","buttons","targetHeight","target","clientHeight","pxDistanceFromBottom","offsetY","percentFromBottom","Math","floor","this","updateValue","setState","round","className","onMouseMove","mouseMoveListener","bind","Component","SortDisplay","pipes","containerRef","React","createRef","currentInstruction","sortSpeedFactor","isAnimating","isRequestingCancel","sortFunction","list","clearHistory","updateData","map","pipe","getValue","sortedList","clone","instructions","getHistory","toggleUserInput","stepSortAnimation","length","i","j","pipeA","pipeB","tempValue","interval","setTimeout","flushList","onSortComplete","el","sortSpeed","pow","slice","getSize","mayUseUserInput","current","classList","toggle","remove","add","forEach","prevValue","at","ref","getData","key","setPipeRef","SortList","len","minSize","maxSize","data","steps","history","speedFactor","randomize","console","log","Array","fill","random","next","push","temp","JSON","stringify","createPartition","lo","hi","pivot","step","swap","merge","beg","mid","end","beg2","algorithms","Quicksort","best","worst","sort","quicksort","partition","Mergesort","mergesort","l","r","m","Selectionsort","min","Bubblesort","bubblesort","swapped","Combsort","gap","sorted","Dial","valueFactor","prevAngle","isInteractable","strokeRefs","strokes","valueRef","isBeyond180","offsetWidth","offsetX","angle","atan","offsetHeight","PI","isClockwiseRotation","nextValue","sensitivity","displayValue","calculateDisplayValue","maxValue","minValue","strokeRef","style","transform","createTransformationCss","textContent","String","onChange","strokeIndex","diameter","isOn","undefined","_","SortPanel","display","sizeDialRef","currentAlgorithm","algorithm","undoRecentSort","nextSize","resize","listSize","dialValue","setSortSpeed","name","executeSort","cancelSortAnimation","toggleInteraction","beginSortAnimation","onSortCompleteListener","Object","keys","onClick","onSortClickListener","title","onUndoClickListener","onRandomizeClickListener","onCancelListener","onDialChange","onResizeListener","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRA0DeA,E,2MA7CbC,MAAQ,CACNC,MAAO,EAAKC,MAAMD,MAClBE,MAAO,EAAKD,MAAMC,O,iFAIlBC,GACM,IAEeC,EAAeD,EAA5BE,YAER,GADiC,OAAVD,GAAoC,IAAlBA,EAAME,QAC3B,CAClB,IAAMC,EAAuBH,EAAMI,OAAOC,aACpCC,EAA+BH,EAAeH,EAAMO,QACpDC,EAA4BC,KAAKC,MACpC,IAAMJ,EAAwBH,GAEjCQ,KAAKC,YAAYJ,M,kCAKTV,GACVa,KAAKE,SAAS,CACZf,MAAOW,KAAKK,MAAMhB,O,iCAMpB,OAAOa,KAAKhB,MAAMG,Q,+BAIlB,OACE,yBACEiB,UAAU,iBACVC,YAAaL,KAAKM,kBAAkBC,KAAKP,OAEzC,yBAAKI,UAAS,eAAUJ,KAAKhB,MAAMG,c,GAxCxBqB,aC+GJC,E,2MA/GbC,MAAqB,G,EACrBC,aAA0CC,IAAMC,Y,EAChDC,mBAAqB,E,EACrBC,gBAAkB,E,EAClBC,aAAc,E,EACdC,oBAAqB,E,kFAEFC,GACjBlB,KAAKd,MAAMiC,KAAKC,eAChBpB,KAAKd,MAAMiC,KAAKE,WACdrB,KAAKU,MAAMY,KAAI,SAACC,GACd,OAAOA,EAAKC,eAGhB,IAAMC,EAAuBzB,KAAKd,MAAMiC,KAAKO,QAC7CR,EAAaO,GACb,IAAME,EAAqCF,EAAWG,aACtD5B,KAAK6B,iBAAgB,GACrB7B,KAAK8B,kBAAkBH,K,4CAInB3B,KAAKgB,cACPhB,KAAKiB,oBAAqB,K,wCAIZU,GAA2C,IAAD,OAC1D,GACEA,EAAaI,OAAS/B,KAAKc,qBAC1Bd,KAAKiB,mBACN,CAAC,IAAD,cACeU,EAAa3B,KAAKc,sBADjC,GACOkB,EADP,KACUC,EADV,KAEMC,EAAclC,KAAKU,MAAMsB,GACzBG,EAAcnC,KAAKU,MAAMuB,GACzBG,EAAoBF,EAAMV,WAChCU,EAAMjC,YAAYkC,EAAMX,YACxBW,EAAMlC,YAAYmC,GAClB,IAAMC,EAA0C,IAAvBrC,KAAKe,gBAC9BuB,YAAW,WACT,EAAKR,kBAAkBH,KACtBU,QAEHrC,KAAKc,mBAAqB,EAC1Bd,KAAK6B,iBAAgB,GACjB7B,KAAKiB,qBACPjB,KAAKuC,YACLvC,KAAKiB,oBAAqB,GAE5BjB,KAAKd,MAAMsD,mB,iCAKJC,EAAiBT,GAC1BhC,KAAKU,MAAMsB,GAAKS,I,mCAGLC,GAEX1C,KAAKe,iBAAmB,EAAIjB,KAAK6C,IAAID,EAAY,IAAK,IAAO,I,kCAI7D1C,KAAKU,MAAQV,KAAKU,MAAMkC,MAAM,EAAG5C,KAAKd,MAAMiC,KAAK0B,WACjD7C,KAAKd,MAAMiC,KAAKE,WAAWrB,KAAKU,MAAMY,KAAI,SAAAC,GAAI,OAAIA,EAAKC,iB,sCAGzCsB,GAEoB,OAA9B9C,KAAKW,aAAaoC,UACW,qBAApBD,GACT9C,KAAKgB,aAAehB,KAAKgB,YACzBhB,KAAKW,aAAaoC,QAAQC,UAAUC,OAJb,iBAMnBH,GACF9C,KAAKgB,aAAc,EACnBhB,KAAKW,aAAaoC,QAAQC,UAAUE,OARf,kBAUrBlD,KAAKgB,aAAc,EACnBhB,KAAKW,aAAaoC,QAAQC,UAAUG,IAXf,oB,uCAiBL,IAAD,OACrBnD,KAAKU,MAAM0C,SAAQ,SAAC7B,EAAYS,GAC9B,IAAMqB,EAAoB,EAAKnE,MAAMiC,KAAKmC,GAAGtB,GAC7CT,EAAKtB,YAAYoD,Q,+BAIM,IAAD,OACxB,OACE,yBAAKjD,UAAU,eAAemD,IAAKvD,KAAKW,cACrCX,KAAKd,MAAMiC,KAAKqC,UAAUlC,KAAI,SAACnC,EAAO6C,GACrC,OACE,kBAAC,EAAD,CACE7C,MAAOA,EACPF,MAAO+C,EACPyB,IAAKzB,EACLuB,IAAK,SAACd,GAAD,OAA2B,EAAKiB,WAAWjB,EAAIT,c,GAvGxCxB,a,OCXLmD,E,WAQnB,WAAYC,GAA2C,IAA9BC,EAA6B,uDAAnB,GAAIC,EAAe,uDAAL,IAAK,yBAPtDF,SAOsD,OANtDG,UAMsD,OALtDC,WAKsD,OAJtDC,aAIsD,OAHtDJ,aAGsD,OAFtDC,aAEsD,OADtDI,iBACsD,EACpDlE,KAAK4D,IAAM9D,KAAKC,MAAM6D,GACtB5D,KAAK+D,KAAO,GACZ/D,KAAKiE,QAAU,GACfjE,KAAKgE,MAAQ,EACbhE,KAAKkE,YAAc,EACnBlE,KAAK6D,QAAUA,EACf7D,KAAK8D,QAAUA,EACf9D,KAAKmE,Y,+CAGJnC,GACD,OAAOhC,KAAK+D,KAAK/B,K,qCAIjBhC,KAAKiE,QAAU,K,8BAIf,IAAMvC,EAAkB,IAAIiC,EAAS3D,KAAK4D,KAG1C,OAFAlC,EAAMqC,KAAN,YAAiB/D,KAAK+D,MACtBrC,EAAMuC,QAAN,YAAoBjE,KAAKiE,SAClBvC,I,gCAIP,OAAO,YAAI1B,KAAK+D,Q,mCAIhB,OAAO,YAAI/D,KAAKiE,W,iCAIhB,OAAOjE,KAAKgE,Q,4BAIZI,QAAQC,IAAR,YAAgBrE,KAAK+D,S,kCAIrB/D,KAAK+D,KAAO,IAAIO,MAAMtE,KAAK4D,KACxBW,KAAK,GACLjD,KAAI,kBAAcxB,KAAKK,MAAsB,IAAhBL,KAAK0E,e,gCAIrC,OAAOxE,KAAK+D,KAAKhC,S,6BAGZ0C,GACL,GAAIA,EAAOzE,KAAK8D,SAAWW,EAAOzE,KAAK6D,QAAS,CAE9C,IADAY,EAAO3E,KAAKC,MAAM0E,IACPzE,KAAK+D,KAAKhC,OACnB,IAAK,IAAIC,EAAIhC,KAAK+D,KAAKhC,OAAQC,EAAIyC,EAAMzC,IACvChC,KAAK+D,KAAKW,KAAK5E,KAAKC,MAAsB,IAAhBD,KAAK0E,gBAExBC,EAAOzE,KAAK+D,KAAKhC,SAC1B/B,KAAK+D,KAAO/D,KAAK+D,KAAKnB,MAAM,EAAG6B,IAGjC,OADAzE,KAAK4D,IAAMa,GACJ,EAET,OAAO,I,6BAIPzE,KAAKgE,U,2BAGFhC,EAAWC,GACd,IAAM0C,EAAe3E,KAAK+D,KAAK/B,GAC/BhC,KAAK+D,KAAK/B,GAAKhC,KAAK+D,KAAK9B,GACzBjC,KAAK+D,KAAK9B,GAAK0C,EACX3C,IAAMC,GACRjC,KAAKiE,QAAQS,KAAK,CAAC1C,EAAGC,M,iCAKxB,OAAO2C,KAAKC,UAAU7E,KAAK+D,KAAM,KAAM,K,iCAG9BA,GACT/D,KAAK+D,KAAL,YAAgBA,EAAKnB,MAAM,EAAG5C,KAAK4D,U,KC5FjCkB,EAAkB,SAAC3D,EAAgB4D,EAAYC,GAGnD,IAFA,IAAMC,EAAgB9D,EAAKmC,GAAG0B,GAC1BhD,EAAY+C,EACTA,EAAKC,GACV7D,EAAK+D,OACD/D,EAAKmC,GAAGyB,GAAME,IAChB9D,EAAKgE,KAAKnD,EAAG+C,GACb/C,KAEF+C,IAGF,OADA5D,EAAKgE,KAAKnD,EAAGgD,GACNhD,GCZHoD,EAAQ,SAACjE,EAAgBkE,EAAaC,EAAaC,GACvD,IAAIC,EAAeF,EAAM,EACzB,KAAInE,EAAKmC,GAAGgC,IAAQnE,EAAKmC,GAAGkC,IAG5B,KAAOH,GAAOC,GAAOE,GAAQD,GAC3B,GAAIpE,EAAKmC,GAAG+B,IAAQlE,EAAKmC,GAAGkC,GAC1BH,QACK,CAEL,IADA,IAAIpG,EAAQuG,EACLvG,IAAUoG,GACflE,EAAKgE,KAAKlG,IAASA,GAErBoG,IACAC,IACAE,MC4BSC,EA5BkB,CAC/BC,UAAW,CACTC,KAAM,WACNC,MAAO,MACPC,KFJc,SAAZC,EAAa3E,GAA6D,IAA7C4D,EAA4C,uDAAvC,EAAGC,EAAoC,uDAAvB7D,EAAKyC,IAAM,EACjE,GAAImB,EAAKC,EAAI,CACX,IAAMe,EAAoBjB,EAAgB3D,EAAM4D,EAAIC,GACpDc,EAAU3E,EAAM4D,EAAIgB,EAAY,GAChCD,EAAU3E,EAAM4E,EAAY,EAAGf,MEEjCgB,UAAW,CACTL,KAAM,WACNC,MAAO,WACPC,KDJc,SAAZI,EAAa9E,GAA2D,IAA3C+E,EAA0C,uDAAtC,EAAGC,EAAmC,uDAAvBhF,EAAKyC,IAAM,EAC/D,GAAIsC,EAAIC,EAAG,CACT,IAAMC,EAAYtG,KAAKC,MAAgB,IAAToG,EAAID,IAAYA,EAC9CD,EAAU9E,EAAM+E,EAAGE,GACnBH,EAAU9E,EAAMiF,EAAI,EAAGD,GACvBf,EAAMjE,EAAM+E,EAAGE,EAAGD,GAClBhF,EAAK+D,UCAPmB,cAAe,CACbV,KAAM,MACNC,MAAO,MACPC,KC7BkB,SAAC1E,GAErB,IADA,IAAMyC,EAAczC,EAAK0B,UAChBb,EAAI,EAAGA,EAAI4B,EAAK5B,IAAK,CAE5B,IADA,IAAIsE,EAActE,EACTC,EAAYD,EAAI,EAAGC,EAAI2B,EAAK3B,IAC/Bd,EAAKmC,GAAGrB,GAAKd,EAAKmC,GAAGgD,KACvBA,EAAMrE,GAGNqE,IAAQtE,GACVb,EAAKgE,KAAKnD,EAAGsE,MDqBjBC,WAAY,CACVZ,KAAM,IACNC,MAAO,MACPC,KElCe,SAAbW,EAAcrF,GAGlB,IAFA,IAAMyC,EAAczC,EAAK0B,UACrB4D,GAAU,EACLzE,EAAI,EAAGA,EAAI4B,EAAK5B,IACnBb,EAAKmC,GAAGtB,EAAI,GAAKb,EAAKmC,GAAGtB,KAC3Bb,EAAKgE,KAAKnD,EAAI,EAAGA,GACjByE,GAAU,GAGVA,GACFD,EAAWrF,KF0BbuF,SAAU,CACRf,KAAM,WACNC,MAAO,MACPC,KGvCa,SAAC1E,GAKhB,IAJA,IACMyC,EAAczC,EAAK0B,UACrB8D,EAAc/C,EACdgD,GAAS,GACLA,GAAQ,EACdD,EAAM7G,KAAKC,MAAM4G,EALE,OAMR,IACTA,EAAM,EACNC,GAAS,GAGX,IADA,IAAI5E,EAAI,EACDA,EAAI2E,EAAM/C,GACXzC,EAAKmC,GAAGtB,GAAKb,EAAKmC,GAAGtB,EAAI2E,KAC3BxF,EAAKgE,KAAKnD,EAAGA,EAAI2E,GACjBC,GAAS,GAEX5E,QCoGS6E,E,2MAvGb1H,MAAQ,EAAKD,MAAMC,MAAQ,EAAKD,MAAM4H,aAAe,E,EACrDC,UAAY,E,EACZC,gBAAiB,E,EACjBF,YAAc,EAAK5H,MAAM4H,aAAe,E,EACxCG,WAA+C3C,MAAM,EAAKpF,MAAMgI,SAC7D3C,KAAK,GACLjD,KAAI,kBAAMV,IAAMC,e,EACnBsG,SAAsCvG,IAAMC,Y,EAC5CF,aAA0CC,IAAMC,Y,iFAG9CzB,GACO,IAAD,OAEeC,EAAeD,EAA5BE,YAER,GADiC,OAAVD,GAAoC,IAAlBA,EAAME,SACzBS,KAAKgH,eAAgB,CACzC,IAAMI,EACJ/H,EAAMI,OAAO4H,YAAchI,EAAMiI,QACjC,GAAMjI,EAAMI,OAAO4H,YACfE,EACJzH,KAAK0H,MACFnI,EAAMO,QAAU,GAAMP,EAAMI,OAAOgI,eACjCpI,EAAMiI,QAAU,GAAMjI,EAAMI,OAAO4H,eACnCD,EAActH,KAAK4H,GAAK,GAC/B,GAAIH,IAAUvH,KAAK+G,UAAW,CAC5B,IAAMY,EAA+BJ,GAASvH,KAAK+G,UAC7Ca,EACJ5H,KAAKb,OACJwI,EACG3H,KAAKd,MAAM2I,aACV,EAAI7H,KAAKd,MAAM2I,aAChBC,EAAuB9H,KAAK+H,sBAAsBH,GAEtDE,GAAgB9H,KAAKd,MAAM8I,UAC3BhI,KAAKd,MAAM+I,UAAYH,IAEvB9H,KAAKb,MAAQyI,EACb5H,KAAK+G,UAAYQ,EACjBvH,KAAKiH,WAAW7D,SAAQ,SAAC8E,EAAWlG,GACR,OAAtBkG,EAAUnF,UACZmF,EAAUnF,QAAQoF,MAAMC,UAAY,EAAKC,wBACvCrG,OAIwB,OAA1BhC,KAAKmH,SAASpE,UAChB/C,KAAKmH,SAASpE,QAAQuF,YAAcC,OAAOT,IAE7C9H,KAAKd,MAAMsJ,SAASV,Q,8CAOJW,GACtB,IAAMlB,EAAiB,IAAMkB,EAAezI,KAAKd,MAAMgI,QAAUlH,KAAKb,MACtE,MAAM,UAAN,OAAiBoI,EAAjB,0BAAwCvH,KAAKd,MAAMwJ,SACjD,EADF,uB,4CAIoBvJ,GACpB,OAAOW,KAAKC,MAAMZ,EAAQa,KAAK8G,e,wCAGf6B,GAChB3I,KAAKgH,oBAA0B4B,IAATD,GAAsB3I,KAAKgH,eAAiB2B,EAWlE,OATI3I,KAAKgH,eAC2B,OAA9BhH,KAAKW,aAAaoC,SACpB/C,KAAKW,aAAaoC,QAAQC,UAAUE,OAHb,gBAMS,OAA9BlD,KAAKW,aAAaoC,SACpB/C,KAAKW,aAAaoC,QAAQC,UAAUG,IAPb,gBAUpBnD,KAAKgH,iB,+BAGa,IAAD,OACxB,OACE,yBACE5G,UAAU,OACVC,YAAaL,KAAKM,kBAAkBC,KAAKP,MACzCuD,IAAKvD,KAAKW,cAETX,KAAKiH,WAAW3F,KAAI,SAACuH,EAAG7G,GACvB,OACE,yBAAK5B,UAAU,cAAcqD,IAAKzB,EAAGuB,IAAK,EAAK0D,WAAWjF,IACxD,yBAAK5B,UAAS,8BAAyB4B,EAAI,SAIjD,yBAAK5B,UAAU,aAAamD,IAAKvD,KAAKmH,UACnCnH,KAAK+H,sBAAsB/H,KAAKb,a,GAjGxBqB,aCqJJsI,E,2MArJbC,QAAwCnI,IAAMC,Y,EAC9CmI,YAAqCpI,IAAMC,Y,EAC3CM,KAAiB,IAAIwC,EAAS,I,EAC9BsF,iBAA2B,EAAK/J,MAAMgK,U,0FAGP,OAAzBlJ,KAAK+I,QAAQhG,UACV/C,KAAK+I,QAAQhG,QAAQ/B,cACxBhB,KAAKmB,KAAKgD,YACVnE,KAAK+I,QAAQhG,QAAQoG,qB,uCAKVC,GAAyB,IAAD,OACZpJ,KAAKmB,KAAKkI,OAAOD,KAE1CpJ,KAAKE,SAAS,CAAEoJ,SAAUF,IAC1B9G,YAAW,WACoB,OAAzB,EAAKyG,QAAQhG,SACf,EAAKgG,QAAQhG,QAAQR,cAEtB,M,mCAIMgH,GACkB,OAAzBvJ,KAAK+I,QAAQhG,SACf/C,KAAK+I,QAAQhG,QAAQyG,aAAaD,K,0CAIlBE,GACW,OAAzBzJ,KAAK+I,QAAQhG,UACV/C,KAAK+I,QAAQhG,QAAQ/B,cACxBhB,KAAKiJ,iBAAmBQ,EACxBzJ,KAAK0J,kB,yCAMoB,OAAzB1J,KAAK+I,QAAQhG,SACf/C,KAAK+I,QAAQhG,QAAQ4G,wB,+CAKU,OAA7B3J,KAAKgJ,YAAYjG,SACnB/C,KAAKgJ,YAAYjG,QAAQ6G,mBAAkB,K,4CAKhB,OAAzB5J,KAAK+I,QAAQhG,UACV/C,KAAK+I,QAAQhG,QAAQ/B,aACxBhB,KAAK+I,QAAQhG,QAAQoG,oB,oCAMzB,GAA6B,OAAzBnJ,KAAK+I,QAAQhG,QAAkB,CACjC,IAAM7B,EACJuE,EAAWzF,KAAKiJ,kBAAkBpD,KACH,OAA7B7F,KAAKgJ,YAAYjG,SACnB/C,KAAKgJ,YAAYjG,QAAQ6G,mBAAkB,GAE7C5J,KAAK+I,QAAQhG,QAAQ8G,mBAAmB3I,M,gDAK1C,OAA6B,OAAzBlB,KAAK+I,QAAQhG,SACR/C,KAAK+I,QAAQhG,QAAQ/B,c,+BAKL,IAAD,OACxB,OACE,yBAAKZ,UAAU,cACb,6BAASA,UAAU,0BACjB,kBAAC,EAAD,CACEe,KAAMnB,KAAKmB,KACXoC,IAAKvD,KAAK+I,QACVvG,eAAgBxC,KAAK8J,uBAAuBvJ,KAAKP,SAGrD,6BAASI,UAAU,qBACjB,6BAASA,UAAU,sBACjB,8DACC2J,OAAOC,KAAKvE,GAAYnE,KAAI,SAACmI,GAC5B,OACE,4BACEhG,IAAKgG,EACLQ,QAAS,EAAKC,oBAAoB3J,KAAK,EAAMkJ,GAC7CU,MAAOV,GAENA,OAKT,6BACA,6BAASrJ,UAAU,mBACjB,mDACA,4BAAQ6J,QAASjK,KAAKoK,oBAAoB7J,KAAKP,OAA/C,aAGA,4BAAQiK,QAASjK,KAAKqK,yBAAyB9J,KAAKP,OAApD,aAGA,4BAAQiK,QAASjK,KAAKsK,iBAAiB/J,KAAKP,OAA5C,WAEF,6BACA,6BAASI,UAAU,0BACjB,yCACA,kBAAC,EAAD,CACEjB,MAAO,IACP+H,QAAS,GACTW,YAAa,EACba,SAAU,IACV5B,YAAa,GACbmB,SAAU,EACVD,SAAU,IACVQ,SAAUxI,KAAKuK,aAAahK,KAAKP,SAGrC,6BAASI,UAAU,yBACjB,wCACA,kBAAC,EAAD,CACEjB,MAAO,GACP+H,QAAS,GACTW,YAAa,EACba,SAAU,IACV5B,YAAa,GACbmB,SAAU,GACVD,SAAU,IACVQ,SAAUxI,KAAKwK,iBAAiBjK,KAAKP,MACrCuD,IAAKvD,KAAKgJ,qB,GA7IAxI,aCCTiK,G,MAXO,WACpB,OACE,yBAAKrK,UAAU,OACb,4BAAQA,UAAU,cAAlB,YACA,iCACE,kBAAC,EAAD,CAAW8I,UAAU,kBCGTwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.321bd408.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\ntype PipeProps = {\r\n  value: number;\r\n  index: number;\r\n};\r\n\r\ntype PipeState = {\r\n  index: number;\r\n  value: number;\r\n};\r\n\r\nclass Pipe extends Component<PipeProps, PipeState> {\r\n  state = {\r\n    index: this.props.index,\r\n    value: this.props.value\r\n  };\r\n\r\n  mouseMoveListener(\r\n    reactEvent: React.MouseEvent<HTMLDivElement, MouseEvent>\r\n  ): void {\r\n    // tslint:disable-next-line (@typescript-eslint/no-explicit-any)\r\n    const { nativeEvent: event }: any = reactEvent;\r\n    const isPrimaryClick = event !== null && event.buttons === 1;\r\n    if (isPrimaryClick) {\r\n      const targetHeight: number = event.target.clientHeight;\r\n      const pxDistanceFromBottom: number = targetHeight - event.offsetY;\r\n      const percentFromBottom: number = Math.floor(\r\n        (100 * pxDistanceFromBottom) / targetHeight\r\n      );\r\n      this.updateValue(percentFromBottom);\r\n    }\r\n    return;\r\n  }\r\n\r\n  updateValue(value: number): void {\r\n    this.setState({\r\n      value: Math.round(value)\r\n    });\r\n    return;\r\n  }\r\n\r\n  getValue(): number {\r\n    return this.state.value;\r\n  }\r\n\r\n  render(): React.ReactNode {\r\n    return (\r\n      <div\r\n        className=\"pipe-container\"\r\n        onMouseMove={this.mouseMoveListener.bind(this)}\r\n      >\r\n        <div className={`pipe-${this.state.value}`}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pipe;\r\n","import React, { Component, RefObject } from 'react';\r\nimport Pipe from './Pipe';\r\nimport SortList from '../SortList';\r\n\r\ntype SortDisplayProps = {\r\n  list: SortList;\r\n  onSortComplete: () => void;\r\n};\r\n\r\ntype SortDisplayState = {};\r\n\r\nclass SortDisplay extends Component<SortDisplayProps, SortDisplayState> {\r\n  pipes: Array<Pipe> = [];\r\n  containerRef: RefObject<HTMLDivElement> = React.createRef();\r\n  currentInstruction = 0;\r\n  sortSpeedFactor = 0;\r\n  isAnimating = false;\r\n  isRequestingCancel = false;\r\n\r\n  beginSortAnimation(sortFunction: (l: SortList) => void): void {\r\n    this.props.list.clearHistory();\r\n    this.props.list.updateData(\r\n      this.pipes.map((pipe: Pipe): number => {\r\n        return pipe.getValue();\r\n      })\r\n    );\r\n    const sortedList: SortList = this.props.list.clone();\r\n    sortFunction(sortedList);\r\n    const instructions: Array<Array<number>> = sortedList.getHistory();\r\n    this.toggleUserInput(false);\r\n    this.stepSortAnimation(instructions);\r\n  }\r\n\r\n  cancelSortAnimation(): void {\r\n    if (this.isAnimating) {\r\n      this.isRequestingCancel = true;\r\n    }\r\n  }\r\n\r\n  stepSortAnimation(instructions: Array<Array<number>>): void {\r\n    if (\r\n      instructions.length > this.currentInstruction &&\r\n      !this.isRequestingCancel\r\n    ) {\r\n      const [i, j] = instructions[this.currentInstruction++];\r\n      const pipeA: Pipe = this.pipes[i];\r\n      const pipeB: Pipe = this.pipes[j];\r\n      const tempValue: number = pipeA.getValue();\r\n      pipeA.updateValue(pipeB.getValue());\r\n      pipeB.updateValue(tempValue);\r\n      const interval: number = this.sortSpeedFactor * 1e3;\r\n      setTimeout((): void => {\r\n        this.stepSortAnimation(instructions);\r\n      }, interval);\r\n    } else {\r\n      this.currentInstruction = 0;\r\n      this.toggleUserInput(true);\r\n      if (this.isRequestingCancel) {\r\n        this.flushList();\r\n        this.isRequestingCancel = false;\r\n      }\r\n      this.props.onSortComplete();\r\n    }\r\n    return;\r\n  }\r\n\r\n  setPipeRef(el: Pipe | null, i: number): void {\r\n    this.pipes[i] = el as Pipe;\r\n  }\r\n\r\n  setSortSpeed(sortSpeed: number): void {\r\n    // Desmos function: y=-\\left(\\frac{x}{100}\\right)^{\\frac{1}{2}}+1\r\n    this.sortSpeedFactor = -1 * Math.pow(sortSpeed / 100, 0.5) + 1;\r\n  }\r\n\r\n  flushList(): void {\r\n    this.pipes = this.pipes.slice(0, this.props.list.getSize());\r\n    this.props.list.updateData(this.pipes.map(pipe => pipe.getValue()));\r\n  }\r\n\r\n  toggleUserInput(mayUseUserInput?: boolean): void {\r\n    const userInputClassName = 'unselectable';\r\n    if (this.containerRef.current !== null) {\r\n      if (typeof mayUseUserInput === 'undefined') {\r\n        this.isAnimating = !this.isAnimating;\r\n        this.containerRef.current.classList.toggle(userInputClassName);\r\n      } else {\r\n        if (mayUseUserInput) {\r\n          this.isAnimating = false;\r\n          this.containerRef.current.classList.remove(userInputClassName);\r\n        } else {\r\n          this.isAnimating = true;\r\n          this.containerRef.current.classList.add(userInputClassName);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  undoRecentSort(): void {\r\n    this.pipes.forEach((pipe: Pipe, i: number) => {\r\n      const prevValue: number = this.props.list.at(i);\r\n      pipe.updateValue(prevValue);\r\n    });\r\n  }\r\n\r\n  render(): React.ReactNode {\r\n    return (\r\n      <div className=\"sort-display\" ref={this.containerRef}>\r\n        {this.props.list.getData().map((value, i) => {\r\n          return (\r\n            <Pipe\r\n              value={value}\r\n              index={i}\r\n              key={i}\r\n              ref={(el: Pipe | null): void => this.setPipeRef(el, i)}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SortDisplay;\r\n","export default class SortList {\r\n  len: number;\r\n  data: Array<number>;\r\n  steps: number;\r\n  history: Array<Array<number>>;\r\n  minSize: number;\r\n  maxSize: number;\r\n  speedFactor: number;\r\n  constructor(len: number, minSize = 10, maxSize = 100) {\r\n    this.len = Math.floor(len);\r\n    this.data = [];\r\n    this.history = [];\r\n    this.steps = 0;\r\n    this.speedFactor = 1;\r\n    this.minSize = minSize;\r\n    this.maxSize = maxSize;\r\n    this.randomize();\r\n  }\r\n\r\n  at(i: number): number {\r\n    return this.data[i];\r\n  }\r\n\r\n  clearHistory(): void {\r\n    this.history = [];\r\n  }\r\n\r\n  clone(): SortList {\r\n    const clone: SortList = new SortList(this.len);\r\n    clone.data = [...this.data];\r\n    clone.history = [...this.history];\r\n    return clone;\r\n  }\r\n\r\n  getData(): Array<number> {\r\n    return [...this.data];\r\n  }\r\n\r\n  getHistory(): Array<Array<number>> {\r\n    return [...this.history];\r\n  }\r\n\r\n  getSteps(): number {\r\n    return this.steps;\r\n  }\r\n\r\n  log(): void {\r\n    console.log([...this.data]);\r\n  }\r\n\r\n  randomize(): void {\r\n    this.data = new Array(this.len)\r\n      .fill(0)\r\n      .map((): number => Math.round(Math.random() * 100));\r\n  }\r\n\r\n  getSize(): number {\r\n    return this.data.length;\r\n  }\r\n\r\n  resize(next: number): boolean {\r\n    if (next < this.maxSize && next > this.minSize) {\r\n      next = Math.floor(next);\r\n      if (next > this.data.length) {\r\n        for (let i = this.data.length; i < next; i++) {\r\n          this.data.push(Math.floor(Math.random() * 100));\r\n        }\r\n      } else if (next < this.data.length) {\r\n        this.data = this.data.slice(0, next);\r\n      }\r\n      this.len = next;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  step(): void {\r\n    this.steps++;\r\n  }\r\n\r\n  swap(i: number, j: number): void {\r\n    const temp: number = this.data[i];\r\n    this.data[i] = this.data[j];\r\n    this.data[j] = temp;\r\n    if (i !== j) {\r\n      this.history.push([i, j]);\r\n    }\r\n  }\r\n\r\n  toString(): string {\r\n    return JSON.stringify(this.data, null, 2);\r\n  }\r\n\r\n  updateData(data: Array<number>): void {\r\n    this.data = [...data.slice(0, this.len)];\r\n  }\r\n}\r\n","import SortList from '../SortList';\r\n\r\nconst createPartition = (list: SortList, lo: number, hi: number): number => {\r\n  const pivot: number = list.at(hi);\r\n  let i: number = lo;\r\n  while (lo < hi) {\r\n    list.step();\r\n    if (list.at(lo) < pivot) {\r\n      list.swap(i, lo);\r\n      i++;\r\n    }\r\n    lo++;\r\n  }\r\n  list.swap(i, hi);\r\n  return i;\r\n};\r\n\r\nconst quicksort = (list: SortList, lo = 0, hi: number = list.len - 1): void => {\r\n  if (lo < hi) {\r\n    const partition: number = createPartition(list, lo, hi);\r\n    quicksort(list, lo, partition - 1);\r\n    quicksort(list, partition + 1, hi);\r\n  }\r\n};\r\n\r\nexport default quicksort;\r\n","import SortList from '../SortList';\r\n\r\nconst merge = (list: SortList, beg: number, mid: number, end: number): void => {\r\n  let beg2: number = mid + 1;\r\n  if (list.at(mid) <= list.at(beg2)) {\r\n    return;\r\n  }\r\n  while (beg <= mid && beg2 <= end) {\r\n    if (list.at(beg) <= list.at(beg2)) {\r\n      beg++;\r\n    } else {\r\n      let index = beg2;\r\n      while (index !== beg) {\r\n        list.swap(index, --index);\r\n      }\r\n      beg++;\r\n      mid++;\r\n      beg2++;\r\n    }\r\n  }\r\n};\r\n\r\nconst mergesort = (list: SortList, l = 0, r: number = list.len - 1): void => {\r\n  if (l < r) {\r\n    const m: number = Math.floor((r - l) * 0.5) + l;\r\n    mergesort(list, l, m);\r\n    mergesort(list, m + 1, r);\r\n    merge(list, l, m, r);\r\n    list.step();\r\n  }\r\n};\r\n\r\nexport default mergesort;\r\n","import SortList from '../SortList';\r\nimport quicksort from './quicksort';\r\nimport mergesort from './mergesort';\r\nimport selectionsort from './selectionsort';\r\nimport bubblesort from './bubblesort';\r\nimport combsort from './combsort';\r\n\r\ntype Algorithm = {\r\n  best: string;\r\n  worst: string;\r\n  sort: (l: SortList) => void;\r\n};\r\n\r\ninterface AlgorithmMap {\r\n  [key: string]: Algorithm;\r\n}\r\n\r\nconst algorithms: AlgorithmMap = {\r\n  Quicksort: {\r\n    best: 'n log(n)',\r\n    worst: 'n^2',\r\n    sort: quicksort\r\n  },\r\n  Mergesort: {\r\n    best: 'n log(n)',\r\n    worst: 'n log(n)',\r\n    sort: mergesort\r\n  },\r\n  Selectionsort: {\r\n    best: 'n^2',\r\n    worst: 'n^2',\r\n    sort: selectionsort\r\n  },\r\n  Bubblesort: {\r\n    best: 'n',\r\n    worst: 'n^2',\r\n    sort: bubblesort\r\n  },\r\n  Combsort: {\r\n    best: 'n log(n)',\r\n    worst: 'n^2',\r\n    sort: combsort\r\n  }\r\n};\r\n\r\nexport default algorithms;\r\n","import SortList from '../SortList';\r\n\r\nconst selectionsort = (list: SortList): void => {\r\n  const len: number = list.getSize();\r\n  for (let i = 0; i < len; i++) {\r\n    let min: number = i;\r\n    for (let j: number = i + 1; j < len; j++) {\r\n      if (list.at(j) < list.at(min)) {\r\n        min = j;\r\n      }\r\n    }\r\n    if (min !== i) {\r\n      list.swap(i, min);\r\n    }\r\n  }\r\n};\r\n\r\nexport default selectionsort;\r\n","import SortList from '../SortList';\r\n\r\nconst bubblesort = (list: SortList): void => {\r\n  const len: number = list.getSize();\r\n  let swapped = false;\r\n  for (let i = 1; i < len; i++) {\r\n    if (list.at(i - 1) > list.at(i)) {\r\n      list.swap(i - 1, i);\r\n      swapped = true;\r\n    }\r\n  }\r\n  if (swapped) {\r\n    bubblesort(list);\r\n  }\r\n};\r\n\r\nexport default bubblesort;\r\n","import SortList from '../SortList';\r\n\r\nconst combsort = (list: SortList): void => {\r\n  const shrinkFactor = 1.3;\r\n  const len: number = list.getSize();\r\n  let gap: number = len;\r\n  let sorted = false;\r\n  while (!sorted) {\r\n    gap = Math.floor(gap / shrinkFactor);\r\n    if (gap <= 1) {\r\n      gap = 1;\r\n      sorted = true;\r\n    }\r\n    let i = 0;\r\n    while (i + gap < len) {\r\n      if (list.at(i) > list.at(i + gap)) {\r\n        list.swap(i, i + gap);\r\n        sorted = false;\r\n      }\r\n      i++;\r\n    }\r\n  }\r\n};\r\n\r\nexport default combsort;\r\n","import React, { Component, RefObject } from 'react';\r\n\r\ntype DialProps = {\r\n  value: number;\r\n  strokes: number;\r\n  sensitivity: number;\r\n  diameter: number; // in pixels\r\n  valueFactor: number;\r\n  minValue: number;\r\n  maxValue: number;\r\n  onChange: (n: number) => void;\r\n};\r\n\r\ntype DialState = {};\r\n\r\nclass Dial extends Component<DialProps, DialState> {\r\n  value = this.props.value * this.props.valueFactor || 0;\r\n  prevAngle = 0;\r\n  isInteractable = true;\r\n  valueFactor = this.props.valueFactor || 1;\r\n  strokeRefs: Array<RefObject<HTMLDivElement>> = Array(this.props.strokes)\r\n    .fill(0)\r\n    .map(() => React.createRef());\r\n  valueRef: RefObject<HTMLDivElement> = React.createRef();\r\n  containerRef: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n  mouseMoveListener(\r\n    reactEvent: React.MouseEvent<HTMLDivElement, MouseEvent>\r\n  ): void {\r\n    // tslint:disable-next-line (@typescript-eslint/no-explicit-any)\r\n    const { nativeEvent: event }: any = reactEvent;\r\n    const isPrimaryClick = event !== null && event.buttons === 1;\r\n    if (isPrimaryClick && this.isInteractable) {\r\n      const isBeyond180: boolean =\r\n        event.target.offsetWidth - event.offsetX >\r\n        0.5 * event.target.offsetWidth;\r\n      const angle: number =\r\n        Math.atan(\r\n          (event.offsetY - 0.5 * event.target.offsetHeight) /\r\n            (event.offsetX - 0.5 * event.target.offsetWidth)\r\n        ) + (isBeyond180 ? Math.PI : 0);\r\n      if (angle !== this.prevAngle) {\r\n        const isClockwiseRotation: boolean = angle >= this.prevAngle;\r\n        const nextValue: number =\r\n          this.value +\r\n          (isClockwiseRotation\r\n            ? this.props.sensitivity\r\n            : -1 * this.props.sensitivity);\r\n        const displayValue: number = this.calculateDisplayValue(nextValue);\r\n        const isWithinBounds: boolean =\r\n          displayValue <= this.props.maxValue &&\r\n          this.props.minValue <= displayValue;\r\n        if (isWithinBounds) {\r\n          this.value = nextValue;\r\n          this.prevAngle = angle;\r\n          this.strokeRefs.forEach((strokeRef, i) => {\r\n            if (strokeRef.current !== null) {\r\n              strokeRef.current.style.transform = this.createTransformationCss(\r\n                i\r\n              );\r\n            }\r\n          });\r\n          if (this.valueRef.current !== null) {\r\n            this.valueRef.current.textContent = String(displayValue);\r\n          }\r\n          this.props.onChange(displayValue);\r\n        }\r\n      }\r\n    }\r\n    return;\r\n  }\r\n\r\n  createTransformationCss(strokeIndex: number): string {\r\n    const angle: number = (360 * strokeIndex) / this.props.strokes + this.value;\r\n    return `rotate(${angle}deg) translate(${this.props.diameter /\r\n      3}px) rotate(90deg)`;\r\n  }\r\n\r\n  calculateDisplayValue(value: number): number {\r\n    return Math.floor(value / this.valueFactor);\r\n  }\r\n\r\n  toggleInteraction(isOn?: boolean): boolean {\r\n    this.isInteractable = isOn === undefined ? !this.isInteractable : isOn;\r\n    const userInputClassName = 'unselectable';\r\n    if (this.isInteractable) {\r\n      if (this.containerRef.current !== null) {\r\n        this.containerRef.current.classList.remove(userInputClassName);\r\n      }\r\n    } else {\r\n      if (this.containerRef.current !== null) {\r\n        this.containerRef.current.classList.add(userInputClassName);\r\n      }\r\n    }\r\n    return this.isInteractable;\r\n  }\r\n\r\n  render(): React.ReactNode {\r\n    return (\r\n      <div\r\n        className=\"dial\"\r\n        onMouseMove={this.mouseMoveListener.bind(this)}\r\n        ref={this.containerRef}\r\n      >\r\n        {this.strokeRefs.map((_, i) => {\r\n          return (\r\n            <div className=\"dial-stroke\" key={i} ref={this.strokeRefs[i]}>\r\n              <div className={`dial-stroke-content-${i + 1}`}></div>\r\n            </div>\r\n          );\r\n        })}\r\n        <div className=\"dial-value\" ref={this.valueRef}>\r\n          {this.calculateDisplayValue(this.value)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dial;\r\n","import React, { Component } from 'react';\r\nimport SortDisplay from './SortDisplay';\r\nimport SortList from '../SortList';\r\nimport algorithms from '../algorithms';\r\nimport Dial from './Dial';\r\n\r\ntype SortPanelProps = {\r\n  algorithm: string;\r\n};\r\n\r\ntype SortPanelState = {\r\n  listSize: number;\r\n};\r\n\r\nclass SortPanel extends Component<SortPanelProps, SortPanelState> {\r\n  display: React.RefObject<SortDisplay> = React.createRef();\r\n  sizeDialRef: React.RefObject<Dial> = React.createRef();\r\n  list: SortList = new SortList(40);\r\n  currentAlgorithm: string = this.props.algorithm;\r\n\r\n  onRandomizeClickListener(): void {\r\n    if (this.display.current !== null) {\r\n      if (!this.display.current.isAnimating) {\r\n        this.list.randomize();\r\n        this.display.current.undoRecentSort();\r\n      }\r\n    }\r\n  }\r\n\r\n  onResizeListener(nextSize: number): void {\r\n    const isProductiveResize = this.list.resize(nextSize);\r\n    if (isProductiveResize) {\r\n      this.setState({ listSize: nextSize });\r\n      setTimeout(() => {\r\n        if (this.display.current !== null) {\r\n          this.display.current.flushList();\r\n        }\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  onDialChange(dialValue: number): void {\r\n    if (this.display.current !== null) {\r\n      this.display.current.setSortSpeed(dialValue);\r\n    }\r\n  }\r\n\r\n  onSortClickListener(name: string): void {\r\n    if (this.display.current !== null) {\r\n      if (!this.display.current.isAnimating) {\r\n        this.currentAlgorithm = name;\r\n        this.executeSort();\r\n      }\r\n    }\r\n  }\r\n\r\n  onCancelListener(): void {\r\n    if (this.display.current !== null) {\r\n      this.display.current.cancelSortAnimation();\r\n    }\r\n  }\r\n\r\n  onSortCompleteListener(): void {\r\n    if (this.sizeDialRef.current !== null) {\r\n      this.sizeDialRef.current.toggleInteraction(true);\r\n    }\r\n  }\r\n\r\n  onUndoClickListener(): void {\r\n    if (this.display.current !== null) {\r\n      if (!this.display.current.isAnimating) {\r\n        this.display.current.undoRecentSort();\r\n      }\r\n    }\r\n  }\r\n\r\n  executeSort(): void {\r\n    if (this.display.current !== null) {\r\n      const sortFunction: (l: SortList) => void =\r\n        algorithms[this.currentAlgorithm].sort;\r\n      if (this.sizeDialRef.current !== null) {\r\n        this.sizeDialRef.current.toggleInteraction(false);\r\n      }\r\n      this.display.current.beginSortAnimation(sortFunction);\r\n    }\r\n  }\r\n\r\n  checkDisplayIsAnimating(): boolean {\r\n    if (this.display.current !== null) {\r\n      return this.display.current.isAnimating;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  render(): React.ReactNode {\r\n    return (\r\n      <div className=\"sort-panel\">\r\n        <section className=\"sort-display-container\">\r\n          <SortDisplay\r\n            list={this.list}\r\n            ref={this.display}\r\n            onSortComplete={this.onSortCompleteListener.bind(this)}\r\n          />\r\n        </section>\r\n        <section className=\"buttons-container\">\r\n          <section className=\"sorting-algorithms\">\r\n            <label>Sorting Algorithms:&nbsp;&nbsp;</label>\r\n            {Object.keys(algorithms).map((name: string) => {\r\n              return (\r\n                <button\r\n                  key={name}\r\n                  onClick={this.onSortClickListener.bind(this, name)}\r\n                  title={name}\r\n                >\r\n                  {name}\r\n                </button>\r\n              );\r\n            })}\r\n          </section>\r\n          <br />\r\n          <section className=\"sorting-options\">\r\n            <label>Options:&nbsp;&nbsp;</label>\r\n            <button onClick={this.onUndoClickListener.bind(this)}>\r\n              Undo Sort\r\n            </button>\r\n            <button onClick={this.onRandomizeClickListener.bind(this)}>\r\n              Randomize\r\n            </button>\r\n            <button onClick={this.onCancelListener.bind(this)}>Cancel</button>\r\n          </section>\r\n          <br />\r\n          <section className=\"speed-option-container\">\r\n            <label>Speed:</label>\r\n            <Dial\r\n              value={100}\r\n              strokes={12}\r\n              sensitivity={2}\r\n              diameter={100}\r\n              valueFactor={20}\r\n              minValue={0}\r\n              maxValue={100}\r\n              onChange={this.onDialChange.bind(this)}\r\n            />\r\n          </section>\r\n          <section className=\"size-option-container\">\r\n            <label>Size:</label>\r\n            <Dial\r\n              value={40}\r\n              strokes={12}\r\n              sensitivity={2}\r\n              diameter={100}\r\n              valueFactor={20}\r\n              minValue={10}\r\n              maxValue={100}\r\n              onChange={this.onResizeListener.bind(this)}\r\n              ref={this.sizeDialRef}\r\n            />\r\n          </section>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SortPanel;\r\n","import React from 'react';\nimport SortPanel from './components/SortPanel';\nimport './css/App.scss';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"app-header\">Somesort</header>\n      <section>\n        <SortPanel algorithm=\"Quicksort\" />\n      </section>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}